import copy

def run(securities):

	for security in securities:
		if security['Updated']==True:
			#then we need to run a search from this point
			search(security, securities)

def search(security, securities):
	trade={}
	trade['Price']=0
	trade['UnmatchedLegs']=[]
	recursiveSearch(trade, securities, 0)

def recursiveSearch(trade, securities, depth):
	if depth>0 and len(trade['UnmatchedLegs']==0):
		print('Found a trade for ' + str(trade['Price']) + '.')
		return
	
	trade['Price']=security['Price']
	trade['UnmatchedLegs']=copy.deepcopy(security['Legs'])

	securitiesToPass = copy.deepcopy(securities)
	index = securitiesToPass.index(security)
	securitiesToPass.pop(index)


'''
	for security in securities:
		if len(security['Legs']) == 1:
			# then this is an outright and we can start a trade
			trade = {}
			trade['Price']=security['Price']
			trade['UnmatchedLeg']=security['Legs'][0]
			
			securitiesToPass = copy.deepcopy(securities)
			index = securitiesToPass.index(security)
			securitiesToPass.pop(index)
			recursiveSearch(trade, securitiesToPass, 1)

def recursiveSearch(trade, securities, depth):
	#restrict the depth of the search
	depth = depth + 1
	if depth > 5:
		return
	
	for security in securities:
		for leg in security['Legs']:
			if trade['UnmatchedLeg'] + leg == 0:
				tradeToPass = copy.deepcopy(trade)
				tradeToPass['Price'] = trade['Price'] + security['Price'] 
				
				if len(security['Legs'])==1:
					# then the trade is match
					if(tradeToPass['Price']<0):
						print('Found a trade at ' + str(tradeToPass['Price']))
				elif len(security['Legs'])==2:
					# then we've got a spread and are adding another leg				
					tradeToPass['UnmatchedLeg'] = trade['UnmatchedLeg'] + security['Legs'][0] + security['Legs'][1]
			
					securitiesToPass = copy.deepcopy(securities)
					index = securitiesToPass.index(security)
					securitiesToPass.pop(index)
					recursiveSearch(tradeToPass, securitiesToPass, depth)
	'''